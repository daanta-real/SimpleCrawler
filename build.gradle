plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.daanta'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '20'
}

ext {
    lombokVersion = '1.18.30'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    /**
     * JAVA ESSENTIALS
     */

    // JUnit for testing
    testImplementation platform('org.junit:junit-bom:latest.integration')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // 로깅 어노테이션을 쓰기 위한 롬복
    // LOMBOK은 사용 전제조건이 까다로우므로 사용 시 주의.
    // 1. 어떤 롬복을 어떤 타겟에 implement(release/dev 모두) 최신판의 버전 숫자를 필히 명기해줘야 한다.
    // 2. 반드시 Annotation Processor를 활성해줘야 한다.
    //  1) 밑에처럼 annotationProcessor 형식의 dependency도 추가로 선언해 줘야 함
    //     웬만하면 밑에 네개 다 넣어야 에러 안 남
    //  2) Settings > Build, Execution, Depolyment > Compiler > Annotation Processors
    //     > Enable annotation processing 에 체크해야 함
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    def lombokDependency = "org.projectlombok:lombok:${lombokVersion}"
    compileOnly lombokDependency
    testCompileOnly lombokDependency
    annotationProcessor lombokDependency
    testAnnotationProcessor lombokDependency



    /**
     * LOGGING
     */
    // 로깅 라이브러리
    // 1. Bridge
    // https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j
    implementation 'org.slf4j:jcl-over-slf4j:latest.integration'
    // 2. Slf4j API
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:latest.integration'
    // 3. Binding
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation 'ch.qos.logback:logback-classic:latest.integration'
    // 4. Slf4j's implemented object (=logback)
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation 'ch.qos.logback:logback-core:latest.integration'



    /**
     * TESTING (JUnit)
     */
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:latest.integration'
    // https://mvnrepository.com/artifact/org.junit/junit-bom
    testImplementation platform('org.junit:junit-bom:latest.integration')



    /**
     * SPRING BOOT
     */
    // Essential Spring Boot Implementations: Main
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    implementation 'org.springframework.boot:spring-boot-starter-web:latest.integration'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:latest.integration'

    // Essential Spring Boot Implementations: Tesing
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
    implementation 'org.springframework.boot:spring-boot-devtools:latest.integration'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
    implementation 'org.springframework.boot:spring-boot-starter-tomcat:latest.integration'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testImplementation 'org.springframework.boot:spring-boot-starter-test:latest.integration'

    // Essential Spring Boot Implementations: Security
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    implementation 'org.springframework.boot:spring-boot-starter-security:latest.integration'



    /**
     * DBMS
     */
    // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:latest.integration'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:latest.integration'
    // For logging the complete queries
    // https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4.1
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:latest.integration'
    // [TEST] H2 database for testing
    // https://mvnrepository.com/artifact/com.h2database/h2
    developmentOnly 'com.h2database:h2:latest.integration'
    // [PRODUCTION] PostgreSQL database for production
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:latest.integration'


    /**
     * UTILITIES - STRING
     */
    // String 취급을 쉽게 해주는 Apache Commons Lang
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:latest.integration'
    // JSON 처리 라이브러리 GSON
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:latest.integration'



    /**
     * UTILITIES - SCHEDULER
     */
    // 스케쥴링 기능을 구현해 주는 Quartz
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-quartz
    implementation 'org.springframework.boot:spring-boot-starter-quartz:latest.integration'



    /**
     * UTILITIES - CRAWLING
     */
    // HTML 파싱을 해주는 JSoup
    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation 'org.jsoup:jsoup:latest.integration'



}

tasks.named('test') {
    useJUnitPlatform()
}
